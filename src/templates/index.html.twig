{% extends '@SyliusAdmin/shared/layout/base.html.twig' %}

{% block title %}{{ 'threebrs.ui.shippingExport.shipmentExport'|trans }} - {{ exporterLabel }} {{ parent() }}{% endblock %}

{% block body %}

	<div class="ui stackable two column grid">
		<div class="column">
			<h1 class="ui header">
				<i class="circular arrow up icon"></i>
				<div class="content">
					{{ 'threebrs.ui.shippingExport.shipmentExport'|trans }} - {{ exporterLabel }}
				</div>
			</h1>
		</div>

		<div class="middle aligned column">
			<div class="ui right floated buttons">

				<div class="ui labeled icon top right floating dropdown button primary link" tabindex="0">
					<i class="icon download"></i>
					<span class="text">{{ 'threebrs.ui.shippingExport.downloadCsvButton'|trans }} (<span class="counter">all</span>)</span>
					<div class="menu left transition hidden" tabindex="-1">
						<a class="item"
						   id="shipment_exports_only_download"
						   href="#"
						   {% if shipments|length == 0 %}disabled="disabled"{% endif %}
						   data-url="{{ path('threebrs_admin_export_shipments', {'exporterName': exporterName}) }}"
						   onclick="downloadCsv(this, 0)">
							<i class="icon download"></i>
							{{ 'threebrs.ui.shippingExport.onlyDownloadCSV'|trans }} (<span class="counter">{{ 'threebrs.ui.shippingExport.allShipment'|trans }}</span>)
						</a>
						<a class="item"
						   href="#"
						   {% if shipments|length == 0 %}disabled="disabled"{% endif %}
						   data-change-state-url="{{ path('threebrs_admin_change_state_shipments', {'exporterName': exporterName}) }}"
						   data-url="{{ path('threebrs_admin_export_shipments', {'exporterName': exporterName}) }}"
						   onclick="downloadCsv(this, 1)">
							<i class="icon download"></i>
							{{ 'threebrs.ui.shippingExport.downloadCSVAndSend'|trans }} (<span class="counter">{{ 'threebrs.ui.shippingExport.allShipment'|trans }}</span>)
						</a>
					</div>
				</div>
			</div>
		</div>
	</div>

	{% import '@SyliusShop/shared/buttons.html.twig' as buttons %}
	{% import '@SyliusAdmin/shared/helper/table.html.twig' as table %}

	<div class="ui segment">
		{% if shipments|length > 0 %}
			{{ include('@ThreeBRSSyliusShipmentExportPlugin/_table.html.twig') }}
		{% else %}
			{% import '@SyliusUi/macro/messages.html.twig' as messages %}
			{{ messages.info('sylius.ui.no_results_to_display') }}
		{% endif %}
	</div>


{% endblock %}

{% block stylesheets %}
	{{ parent() }}
{% endblock %}

{% block javascripts %}
	{{ parent() }}

	<script>
		document.addEventListener("DOMContentLoaded", function () {
			document.querySelectorAll(".exportCheckbox").forEach(checkbox => {
				checkbox.addEventListener("change", countCheckboxes);
			});
		});

		function countCheckboxes() {
			const checkedCheckboxes = document.querySelectorAll(".exportCheckbox:checked");
			const counterElement = document.querySelector(".counter");

			if (checkedCheckboxes.length > 0) {
				counterElement.innerHTML = checkedCheckboxes.length;
			} else {
				counterElement.innerHTML = "{{ 'threebrs.ui.shippingExport.allShipment'|trans }}";
			}
		}

		function getCheckedCheckboxesIds() {
			let ids = [];
			const checkedCheckboxes = document.querySelectorAll(".exportCheckbox:checked");

			if (checkedCheckboxes.length > 0) {
				checkedCheckboxes.forEach(checkbox => ids.push(checkbox.value));
			} else {
				document.querySelectorAll(".exportCheckbox").forEach(checkbox => ids.push(checkbox.value));
			}

			return ids;
		}

		function testAnswer(regex, result) {
			if (!regex) {
				return true;
			}
			return new RegExp(regex).test(result);
		}

		function downloadCsv(el, isConfirm, singleRow = null) {
			if (isConfirm && !confirm("{{ 'threebrs.ui.shippingExport.confirmSendQuestion'|trans }}")) {
				return false;
			}

			let ids = singleRow !== null ? [singleRow] : getCheckedCheckboxesIds();
			let urlParams = ids.map(id => `ids[]=${id}`);

			{% for question in exporter.questionsArray %}
			let resultOk = false;
			do {
				let result = prompt("{{ question.label }}", "{{ question.defaultValue is not empty ? question.defaultValue : '' }}");
				if (typeof result === "undefined" || result === null) {
					return;
				} else if (testAnswer({% if question.regex is not null %}{{ question.regex }}{% else %}''{% endif %}, result)) {
					urlParams.push(`questions[{{ question.code }}]=${result}`);
					resultOk = true;
				}
			} while (!resultOk);
			{% endfor %}

			let urlParamsString = urlParams.filter(Boolean).join("&");
			urlParamsString = urlParamsString.length > 0 ? `?${urlParamsString}` : "";
			window.open(el.dataset.url + urlParamsString, "_blank");
			if (isConfirm) {
				window.location.href = el.dataset.changeStateUrl + urlParamsString;
			}
		}
	</script>
{% endblock %}
